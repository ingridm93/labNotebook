handleSaveComment(e) {

    var field = e.target.name

    var send = {
        [field]: this.state[field]
    }

    if(field === 'grade') {
        console.log('save grade', send);
        // this.props.dispatch(saveGrade());
    }

    if(field === 'comment') {
        console.log('save comment', send);
        // this.props.dispatch(saveComment());
    }


}



{course.assignments.map(assignment => (
    <li>{assignment.assignment_name}</li>
    )
)}




var spicedPg = require('spiced-pg');
var bcrypt = require('bcryptjs');
const secrets = require('../secrets.json');
const db = spicedPg(`postgres:${secrets.dbuser}:${secrets.dbpassword}@localhost:5432/labnb`);

module.exports.addNewClass = function (user_id, code) {

    const insert = `INSERT INTO users_sections (user_id, section_id) VALUES ($1, $2) RETURNING section_id`;
    const result = db.query(insert, [user_id, code]);
    return result
};

module.exports.getStudentData = function (email) {

    const select = `SELECT users.id, first_name, last_name, users_sections.user_id, users_sections.section_id, sections.id, sections.id, sections.name, sections.course_id, courses.id, courses.course_name, courses.teacher_id, assignments.assignment_name
    FROM users
    JOIN users_sections ON users.id = user_id
    JOIN sections ON users_sections.section_id = sections.id
    JOIN courses ON course_id=courses.id
    JOIN assignments ON sections.id = assignments.section_id
    WHERE email=$1`;

    const result = db.query(select, [email]);

    return result;
}

module.exports.updateClassList = function (user_id) {
    const select = `SELECT courses.name, sections.id FROM users_sections
    JOIN sections ON section_id = sections.id
    JOIN courses ON course_id=courses.id WHERE user_id=$1`;

    const result = db.query(select, [user_id]);
    return result;
}

// module.exports.getAssignmentList = function (user_id, section_id) {
//
//     const select = ` SELECT assignments.name, assignments.section_id FROM users_sections JOIN assignments ON users_sections.section_id = assignments.section_id WHERE user_id=$1 AND users_sections.section_id = $2;`;
//
//     const result = db.query(select, [user_id, section_id]);
//
//     return result;
//
//
// }











INSERT INTO users (first_name, last_name, email, password, role) VALUES ('Maggie', 'Wiseman', 'm@m', 'maggiepass', 'teacher');

INSERT INTO users (first_name, last_name, email, password, role) VALUES ('Ingrid', 'Majdalani', 'i@i', 'ingridpass', 'student');

INSERT INTO users (first_name, last_name, email, password, role) VALUES ('Rebecca', 'Krummel', 'r@r', 'rebeccapass', 'student');

INSERT INTO courses (course_name, teacher_id) VALUES ('Chemistry 2017', 1);

INSERT INTO courses (course_name, teacher_id) VALUES ('Biology 2017', 2);

INSERT INTO courses (course_name, teacher_id) VALUES ('Math 2017', 1);

INSERT INTO courses (course_name, teacher_id) VALUES ('History 2017', 1);

INSERT INTO sections (name, course_id ) VALUES ('1st Period', 1);

INSERT INTO sections (name, course_id ) VALUES ('2nd Period', 1);

INSERT INTO sections (name, course_id ) VALUES ('3rd Period', 2);

INSERT INTO sections (name, course_id ) VALUES ('4th Period', 3);

INSERT INTO sections (name, course_id ) VALUES ('1sr Period', 4);

INSERT INTO users_sections (user_id, section_id) VALUES (4, 1);

INSERT INTO users_sections (user_id, section_id) VALUES (4, 2);

INSERT INTO users_sections (user_id, section_id) VALUES (4, 3);

INSERT INTO users_sections (user_id, section_id) VALUES (4, 4);

INSERT INTO users_sections (user_id, section_id) VALUES (4, 1);

INSERT INTO students_reports (student_id, section_id, assignment_id) VALUES (4, 1, 1);

INSERT INTO students_reports (student_id, section_id, assignment_id) VALUES (4, 2, 2);

INSERT INTO assignments (section_id, group_lab, assignment_name, instructions, title, abstract, question, hypothesis, variables, materials, procedures, data, calculations, discussion) VALUES (1, FALSE, 'Rutherford Lab', 'https://www.dropbox.com/s/nsd1xcine2zzvdm/Lab_Rutherford.pdf', 'individual', 'individual','individual','individual','individual','individual','individual','individual','individual','individual');

INSERT INTO assignments (section_id, group_lab, assignment_name, instructions, title, abstract, question, hypothesis, variables, materials, procedures, data, calculations, discussion) VALUES (1, FALSE, 'ASSIGNMENT TEST HERE', 'this link to the assignment', 'individual', 'individual','individual','individual','individual','individual','individual','individual','individual','individual');

INSERT INTO assignments (section_id, group_lab, assignment_name, instructions, title, abstract, question, hypothesis, variables, materials, procedures, data, calculations, discussion) VALUES (2, FALSE, 'Volume of Sugar Molecule', 'https://www.dropbox.com/s/o7kkoofi0zbpoq0/Lab_FindVolumeofMoleculeofSugar.pdf', 'individual', 'individual','individual','individual','individual','individual','individual','individual','individual','individual');

INSERT INTO titles (assignment_id, editable) VALUES (1, TRUE);
INSERT INTO questions (assignment_id, editable) VALUES (1, TRUE);
INSERT INTO abstracts (assignment_id, editable) VALUES (1, TRUE);
INSERT INTO hypotheses (assignment_id, editable) VALUES (1, TRUE);
INSERT INTO variables (assignment_id, editable) VALUES (1, TRUE);
INSERT INTO materials (assignment_id, editable) VALUES (1, TRUE);
INSERT INTO procedures (assignment_id, editable) VALUES (1, TRUE);
INSERT INTO data (assignment_id, editable) VALUES (1, TRUE);
INSERT INTO calculations (assignment_id, editable) VALUES (1, TRUE);
INSERT INTO discussions (assignment_id, editable) VALUES (1, TRUE);

INSERT INTO titles (assignment_id, editable) VALUES (2, TRUE);
INSERT INTO questions (assignment_id, editable) VALUES (2, TRUE);
INSERT INTO abstracts (assignment_id, editable) VALUES (2, TRUE);
INSERT INTO hypotheses (assignment_id, editable) VALUES (2, TRUE);
INSERT INTO variables (assignment_id, editable) VALUES (2, TRUE);
INSERT INTO materials (assignment_id, editable) VALUES (2, TRUE);
INSERT INTO procedures (assignment_id, editable) VALUES (2, TRUE);
INSERT INTO data (assignment_id, editable) VALUES (2, TRUE);
INSERT INTO calculations (assignment_id, editable) VALUES (2, TRUE);
INSERT INTO discussions (assignment_id, editable) VALUES (2, TRUE);






DROP TABLE IF EXISTS messages;
DROP TABLE IF EXISTS students_reports;
DROP TABLE IF EXISTS discussions;
DROP TABLE IF EXISTS calculations;
DROP TABLE IF EXISTS data;
DROP TABLE IF EXISTS procedures;
DROP TABLE IF EXISTS materials;
DROP TABLE IF EXISTS variables;
DROP TABLE IF EXISTS hypotheses;
DROP TABLE IF EXISTS abstracts;
DROP TABLE IF EXISTS questions;
DROP TABLE IF EXISTS titles;
DROP TABLE IF EXISTS assignments;
DROP TABLE IF EXISTS groups_students;
DROP TABLE IF EXISTS groups;
DROP TABLE IF EXISTS users_sections;
DROP TABLE IF EXISTS sections;
DROP TABLE IF EXISTS courses;
DROP TABLE IF EXISTS users;


CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    profile_pic VARCHAR(255),
    bio VARCHAR(300),
    role VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE courses (
    id SERIAL PRIMARY KEY,
    course_name VARCHAR(100) NOT NULL,
    teacher_id INTEGER REFERENCES users(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE sections (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    course_id INTEGER REFERENCES courses(id),
    start_date DATE,
    end_date DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE users_sections (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) NOT NULL,
    section_id INTEGER REFERENCES sections(id) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE groups (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description VARCHAR (255),
    section_id INTEGER REFERENCES sections(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE groups_students (
    id SERIAL PRIMARY KEY,
    group_id INTEGER REFERENCES groups(id),
    student_id INTEGER REFERENCES users(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE assignments (
    id SERIAL PRIMARY KEY,
    section_id INTEGER REFERENCES sections(id) NOT NULL,
    group_lab BOOLEAN NOT NULL,
    group_id INTEGER REFERENCES groups(id),
    assignment_name VARCHAR(255) NOT NULL,
    instructions VARCHAR(255),
    due DATE,
    title VARCHAR(100),
    default_title TEXT,
    abstract VARCHAR(100),
    default_abstract TEXT,
    question VARCHAR(100),
    default_question TEXT,
    hypothesis VARCHAR(100),
    default_hypothesis TEXT,
    variables VARCHAR(100),
    default_variables TEXT,
    materials VARCHAR(100),
    default_materials TEXT,
    procedures VARCHAR(100),
    default_procedures TEXT,
    data VARCHAR(100),
    default_data TEXT,
    calculations VARCHAR(100),
    default_calc TEXT,
    discussion VARCHAR(100),
    default_discussion TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE titles (
    id SERIAL PRIMARY KEY,
    assignment_id INTEGER REFERENCES assignments(id),
    group_id INTEGER REFERENCES groups(id),
    editable BOOLEAN,
    content TEXT,
    comments TEXT,
    grade VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE questions (
    id SERIAL PRIMARY KEY,
    assignment_id INTEGER REFERENCES assignments(id),
    group_id INTEGER REFERENCES groups(id),
    editable BOOLEAN,
    content TEXT,
    comments TEXT,
    grade VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE abstracts (
    id SERIAL PRIMARY KEY,
    assignment_id INTEGER REFERENCES assignments(id),
    group_id INTEGER REFERENCES groups(id),
    editable BOOLEAN,
    content TEXT,
    comments TEXT,
    grade VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE hypotheses (
    id SERIAL PRIMARY KEY,
    assignment_id INTEGER REFERENCES assignments(id),
    group_id INTEGER REFERENCES groups(id),
    editable BOOLEAN,
    content TEXT,
    comments TEXT,
    grade VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE variables (
    id SERIAL PRIMARY KEY,
    assignment_id INTEGER REFERENCES assignments(id),
    group_id INTEGER REFERENCES groups(id),
    editable BOOLEAN,
    content TEXT,
    comments TEXT,
    grade VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE materials (
    id SERIAL PRIMARY KEY,
    assignment_id INTEGER REFERENCES assignments(id),
    group_id INTEGER REFERENCES groups(id),
    editable BOOLEAN,
    content TEXT,
    comments TEXT,
    grade VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE procedures (
    id SERIAL PRIMARY KEY,
    assignment_id INTEGER REFERENCES assignments(id),
    group_id INTEGER REFERENCES groups(id),
    editable BOOLEAN,
    content TEXT,
    comments TEXT,
    grade VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE data (
    id SERIAL PRIMARY KEY,
    assignment_id INTEGER REFERENCES assignments(id),
    group_id INTEGER REFERENCES groups(id),
    editable BOOLEAN,
    content TEXT,
    comments TEXT,
    grade VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE calculations (
    id SERIAL PRIMARY KEY,
    assignment_id INTEGER REFERENCES assignments(id),
    group_id INTEGER REFERENCES groups(id),
    editable BOOLEAN,
    content TEXT,
    comments TEXT,
    grade VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE discussions (
    id SERIAL PRIMARY KEY,
    assignment_id INTEGER REFERENCES assignments(id),
    group_id INTEGER REFERENCES groups(id),
    editable BOOLEAN,
    content TEXT,
    comments TEXT,
    grade VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE students_reports (
    id SERIAL PRIMARY KEY,
    student_id INTEGER REFERENCES users(id) NOT NULL,
    section_id INTEGER REFERENCES sections(id) NOT NULL,
    assignment_id INTEGER REFERENCES assignments(id) NOT NULL,
    group_id INTEGER REFERENCES groups(id),
    abstract_id INTEGER REFERENCES abstracts(id),
    question_id INTEGER REFERENCES questions(id),
    hypothesis_id INTEGER REFERENCES hypotheses(id),
    variables_id INTEGER REFERENCES variables(id),
    materials_id INTEGER REFERENCES materials(id),
    procedures_id INTEGER REFERENCES procedures(id),
    data_id INTEGER REFERENCES data(id),
    calculations_id INTEGER REFERENCES calculations(id),
    discussion_id INTEGER REFERENCES discussions(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE messages (
    id SERIAL PRIMARY KEY,
    to_id INTEGER REFERENCES users(id) NOT NULL,
    from_id INTEGER REFERENCES users(id) NOT NULL,
    content TEXT NOT NULL,
    response_id INTEGER REFERENCES messages(id),
    assignment_id INTEGER REFERENCES assignments(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
